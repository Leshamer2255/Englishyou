// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  progress       UserProgress?
  achievements   Achievement[]
  exercises      Exercise[]   @relation("UserExercises")
  progresses     Progress[]   @relation("UserProgresses")
}

model UserProgress {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabularyWords   Int      @default(0)
  grammarExercises  Int      @default(0)
  listeningExercises Int     @default(0)
  speakingExercises Int      @default(0)
  totalScore        Int      @default(0)
  streak            Int      @default(0)
  level             String   @default("Beginner")
  lastActivity      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  title       String
  description String
  icon        String
  unlockedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, type])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id          String     @id @default(cuid())
  title       String
  description String
  type        String     // vocabulary, grammar, listening
  difficulty  String     // beginner, intermediate, advanced
  content     Json       // Exercise content and answers
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation("UserExercises", fields: [userId], references: [id])
  userId      String
  progress    Progress[]
}

model Progress {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  score      Int
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("UserProgresses", fields: [userId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}
